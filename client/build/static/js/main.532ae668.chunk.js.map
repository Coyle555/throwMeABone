{"version":3,"sources":["assets/images/tab-logo.svg","components/TopNav.js","components/Footer.js","utils/queries.js","utils/mutations.js","utils/auth.js","components/PetList.js","utils/localStorage.js","components/StateProvider.js","App.js","index.js"],"names":["TopNav","Navbar","bg","expand","Container","Brand","href","Toggle","Collapse","id","Nav","className","Link","StickyFooter","alt","width","src","require","default","QUERY_DOGS","gql","SAVE_DOG","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","PetList","response","useState","allDogs","JSON","parse","savedDogIds","setSavedDogIds","useMutation","saveDog","error","useEffect","dogIdArr","length","stringify","handleSaveDog","a","dogToSave","find","dog","Auth","loggedIn","variables","dogData","data","console","log","CardColumns","loading","dogs","map","Card","border","m","image","Img","name","variant","style","Body","Title","breed","Text","description","Button","disabled","some","savedId","onClick","StateProvider","useQuery","Footer","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.532ae668.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/tab-logo.f94e4003.svg\";","import React from 'react';\nimport { \n  Container,\n  Navbar,\n  Nav,\n  NavDropdown, \n  \n  } from 'react-bootstrap';\n\nconst TopNav = () => {\n  return (\n    <>\n<Navbar bg=\"light\" expand=\"md\">\n  <Container>\n    <Navbar.Brand href=\"/\">Throw Me A Bone</Navbar.Brand>\n    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n    <Navbar.Collapse id=\"basic-navbar-nav\">\n      <Nav className=\"me-auto\">\n        <Nav.Link href=\"#/\">Home</Nav.Link>\n<Nav.Link href=\"about\">About</Nav.Link>        \n<Nav.Link href=\"profile\">Profile</Nav.Link>        \n<Nav.Link href=\"contact\">Contact</Nav.Link>        \n<Nav.Link href=\"login\">Login</Nav.Link>        \n<Nav.Link href=\"signup\">signup</Nav.Link>        \n\n      </Nav>\n    </Navbar.Collapse>\n  </Container>\n</Navbar>\n\n    </>\n  );\n}\n\nexport default TopNav;\n","import React from 'react';\nimport { Container } from 'react-bootstrap';\nconst StickyFooter = () => {\n  return (\n    <>\n<footer className=\"footer mt-auto py-3\">\n \n<Container>\n<img\n                    alt=\"...\"\n                    className=\"img-fluid\"\n                    width=\"600\"\n                    src={require(\"../assets/images/tab-logo.svg\").default}\n                  /></Container>\n</footer>\n    </>\n  );\n}\nexport default StickyFooter;","import { gql } from '@apollo/client';\n\nexport const QUERY_ME = gql`\n  {\n    me {\n      _id\n      username\n      email\n      savedDogs {\n        dogId\n        breed\n        image\n        description\n        age\n        spaynuet\n      }\n    }\n  }\n`;\n\nexport const QUERY_DOGS =gql`\n{\n  dogs {\n  id\n  name\n  breed\n  image\n  age\n  spaynuet\n  }\n}\n`;","import { gql } from '@apollo/client';\n\nexport const LOGIN_USER = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser($username: String!, $email: String!, $password: String!) {\n    addUser(username: $username, email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\n\nexport const SAVE_DOG = gql`\n  mutation saveDog($DogData: DogInput!) {\n    saveDog(DogData: $DogData) {\n      _id\n      username\n      email\n      savedDogs {\n        dogId\n        breed\n        image\n        description\n        age\n        spaynuet\n      }\n    }\n  }\n`;\n\nexport const REMOVE_DOG = gql`\n  mutation removeDog($dogId: ID!) {\n    removeDog(dogId: $dogId) {\n      _id\n      username\n      email\n      savedDogs {\n        dogId\n        breed\n        image\n        description\n        age\n        spaynuet\n      }\n    }\n  }\n`;\n","// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode';\n\n// create a new class to instantiate for a user\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // check if user's logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Container,\n  Button,\n  Card,\n  CardColumns\n} from \"react-bootstrap\";\n\nimport { useMutation } from \"@apollo/client\";\nimport { SAVE_DOG } from \"../utils/mutations\";\nimport { saveDogIds, getSavedDogIds } from \"../utils/localStorage\";\n\nimport Auth from \"../utils/auth\";\n\nconst PetList = ({ response }) => {\n  // create state for holding returned google api data\n  const [allDogs, setallDogs] = useState([]);\n  // create state to hold saved dogId values\n  const [savedDogIds, setSavedDogIds] = useState(getSavedDogIds());\n\n  const [saveDog, { error }] = useMutation(SAVE_DOG);\n\n  // set up useEffect hook to save `savedDogIds` list to localStorage on component unmount\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\n  useEffect(() => {\n    return () => saveDogIds(savedDogIds);\n  });\n\n  // create function to handle saving a dog to our database\n  const handleSaveDog = async (id) => {\n    // find the dog in `allDogs` state by the matching id\n    const dogToSave = allDogs.find((dog) => dog.id === id);\n\n    // get token\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const { data } = await saveDog({\n        variables: { dogData: { ...dogToSave } },\n      });\n      console.log(savedDogIds);\n      setSavedDogIds([...savedDogIds, dogToSave.id]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n  console.log(response?.data);\n  return (\n    <>\n        <Container>\n          <h1>Adopt or Sponsor one of these beauties!</h1>\n        </Container>\n\n      <Container>\n        <h2>\n          {allDogs.length\n            ? `We currently have ${allDogs.length} up for Adoption:`\n            : `Find out more by clicking on the each dog's picture.`}\n        </h2>\n        <CardColumns>\n          {\n            response.loading\n            ? <div>unloading</div>\n            : response.data.dogs.map((dog) => {\n            return (\n              <Card key={dog.id} border=\"dark\" m={10}>\n                {dog.image ? (\n                  <Card.Img\n                    src={dog.image}\n                    alt={`The picture for ${dog.name}`}\n                    variant=\"top\"\n                    style={{width: 150}}\n                  />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{dog.name}</Card.Title>\n                  <p className=\"small\">Breed: {dog.breed}</p>\n                  <Card.Text>{dog.description}</Card.Text>\n                  {Auth.loggedIn() && (\n                    <Button\n                      disabled={savedDogIds?.some(\n                        (savedId) => savedId === dog.id\n                      )}\n                      className=\"btn-block btn-info\"\n                      onClick={() => handleSaveDog(dog.id)}\n                    >\n                      {savedDogIds?.some((savedId) => savedId === dog.id)\n                        ? `${dog.name} is already saved!`\n                        : \"Save This dog!\"}\n                    </Button>\n                  )}\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default PetList;\n","export const getSavedDogIds = () => {\n  const savedDogIds = localStorage.getItem('saved_dogs')\n    ? JSON.parse(localStorage.getItem('saved_dogs'))\n    : [];\n\n  return savedDogIds;\n};\n\nexport const saveDogIds = (dogIdArr) => {\n  if (dogIdArr.length) {\n    localStorage.setItem('saved_dogs', JSON.stringify(dogIdArr));\n  } else {\n    localStorage.removeItem('saved_dogs');\n  }\n};\n\nexport const removeDogId = (dogId) => {\n  const savedDogIds = localStorage.getItem('saved_dogs')\n    ? JSON.parse(localStorage.getItem('saved_dogs'))\n    : null;\n\n  if (!savedDogIds) {\n    return false;\n  }\n\n  const updatedSavedDogIds = savedDogIds?.filter((savedDogId) => savedDogId !== dogId);\n  localStorage.setItem('saved_dogs', JSON.stringify(updatedSavedDogIds));\n\n  return true;\n};\n","import React from 'react';\nimport TopNav from './TopNav.js';\nimport Footer from './Footer.js';\nimport {\n  useQuery\n} from '@apollo/client';\nimport { QUERY_DOGS } from '../utils/queries';\nimport PetList from './PetList'\n\nexport default function StateProvider() {\n  const {loading, data, error} = useQuery(QUERY_DOGS);\n  if (data) {console.log(data)};\n\n  return (\n    <>\n    <TopNav />\n     {/*  <AppRouter /> */}\n     <PetList response={{loading, data, error}} />\n    <Footer />\n    </>\n  )\n}","import React from 'react';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport './assets/css/bootstrap.min.css';\nimport './assets/css/styles.css';\nimport './assets/css/colors.css';\n\n\nimport TopNav from './components/TopNav.js';\nimport Footer from './components/Footer.js';\nimport StateProvider from './components/StateProvider';\n/* import AppRouter from './Router.js';\n */\n// Construct our main GraphQL API endpoint\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\n// Construct request middleware that will attach the JWT token to every request as an `authorization` header\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem('id_token');\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  // Set up our client to execute the `authLink` middleware prior to making the request to our GraphQL API\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n\n  return (\n    <ApolloProvider client={client}>\n      <StateProvider />\n    </ApolloProvider>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}